!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEBFLAGS	./Makefile	/^  DEBFLAGS = -O -g -DSCULLC_DEBUG # "-O" is needed to expand inlines$/;"	m
DEBFLAGS	./Makefile	/^  DEBFLAGS = -O2$/;"	m
KERNELDIR	./Makefile	/^KERNELDIR ?= \/lib\/modules\/$(shell uname -r)\/build$/;"	m
LDDINC	./Makefile	/^LDDINC=$(PWD)$/;"	m
PWD	./Makefile	/^PWD       := $(shell pwd)$/;"	m
SCULLC_USE_PROC	./scullc.h	45;"	d
TARGET	./Makefile	/^TARGET = scullc$/;"	m
__this_module	./scullc.mod.c	/^__visible struct module __this_module$/;"	v	typeref:struct:module
__used	./scullc.mod.c	/^__used$/;"	v	file:
__used	./scullc.mod.c	/^__used$/;"	v	typeref:struct:____versions	file:
cdev	./scullc.h	/^	struct cdev cdev;$/;"	m	struct:scullc_dev	typeref:struct:scullc_dev::cdev
data	./scullc.h	/^	void **data;$/;"	m	struct:scullc_dev
next	./scullc.h	/^	struct scullc_dev *next;  \/* next listitem *\/$/;"	m	struct:scullc_dev	typeref:struct:scullc_dev::scullc_dev
obj-m	./Makefile	/^obj-m	:= scullc.o$/;"	m
qset	./scullc.h	/^	int qset;                 \/* the current array size *\/$/;"	m	struct:scullc_dev
quantum	./scullc.h	/^	int quantum;              \/* the current allocation size *\/$/;"	m	struct:scullc_dev
scullc-objs	./Makefile	/^scullc-objs := main.o$/;"	m
scullc_cache	./main.c	/^struct kmem_cache *scullc_cache;$/;"	v	typeref:struct:kmem_cache
scullc_cleanup	./main.c	/^module_exit(scullc_cleanup);$/;"	v
scullc_cleanup	./main.c	/^void scullc_cleanup(void)$/;"	f
scullc_dev	./scullc.h	/^struct scullc_dev {$/;"	s
scullc_devices	./main.c	/^struct scullc_dev *scullc_devices; \/* allocated in scullc_init *\/$/;"	v	typeref:struct:scullc_dev
scullc_devs	./main.c	/^int scullc_devs = 1;	\/* number of bare scullc devices *\/$/;"	v
scullc_follow	./main.c	/^struct scullc_dev *scullc_follow(struct scullc_dev *dev, int n)$/;"	f
scullc_fops	./main.c	/^struct file_operations scullc_fops = {$/;"	v	typeref:struct:file_operations
scullc_init	./main.c	/^int scullc_init(void)$/;"	f
scullc_init	./main.c	/^module_init(scullc_init);$/;"	v
scullc_major	./main.c	/^int scullc_major;$/;"	v
scullc_mmap	./mmap.c	/^int scullc_mmap(struct file *filp, struct vm_area_struct *vma)$/;"	f
scullc_open	./main.c	/^int scullc_open (struct inode *inode, struct file *filp)$/;"	f
scullc_qset	./main.c	/^int scullc_qset =    500;$/;"	v
scullc_quantum	./main.c	/^int scullc_quantum = 4000;$/;"	v
scullc_read	./main.c	/^ssize_t scullc_read (struct file *filp, char __user *buf, size_t count,$/;"	f
scullc_release	./main.c	/^int scullc_release (struct inode *inode, struct file *filp)$/;"	f
scullc_setup_cdev	./main.c	/^static void scullc_setup_cdev(struct scullc_dev *dev, int index)$/;"	f	file:
scullc_trim	./main.c	/^int scullc_trim(struct scullc_dev *dev)$/;"	f
scullc_vm_ops	./mmap.c	/^struct vm_operations_struct scullc_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct
scullc_vma_close	./mmap.c	/^void scullc_vma_close(struct vm_area_struct *vma)$/;"	f
scullc_vma_nopage	./mmap.c	/^struct page *scullc_vma_nopage(struct vm_area_struct *vma,$/;"	f
scullc_vma_open	./mmap.c	/^void scullc_vma_open(struct vm_area_struct *vma)$/;"	f
scullc_write	./main.c	/^ssize_t scullc_write (struct file *filp, const char __user *buf, size_t count,$/;"	f
sem	./scullc.h	/^	struct semaphore sem;     \/* Mutual exclusion *\/$/;"	m	struct:scullc_dev	typeref:struct:scullc_dev::semaphore
size	./scullc.h	/^	size_t size;              \/* 32-bit will suffice *\/$/;"	m	struct:scullc_dev
vmas	./scullc.h	/^	int vmas;                 \/* active mappings *\/$/;"	m	struct:scullc_dev
